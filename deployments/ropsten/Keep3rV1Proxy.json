{
  "address": "0xe663e02f868271bdDa54Df05B7B06360db8B1aC2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_keep3rV1",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Cooldown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoDrawableAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGovernance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMinter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPendingGovernance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pendingGovernance",
          "type": "address"
        }
      ],
      "name": "GovernanceProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "GovernanceSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptKeep3rV1Governance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_job",
          "type": "address"
        }
      ],
      "name": "addJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_job",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addKPRCredit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidity",
          "type": "address"
        }
      ],
      "name": "approveLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "caps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "dispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "draw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keep3rV1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "next",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipients",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipientsCaps",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "caps",
              "type": "uint256"
            }
          ],
          "internalType": "struct IKeep3rV1Proxy.Recipient[]",
          "name": "_memory",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_job",
          "type": "address"
        }
      ],
      "name": "removeJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "removeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "resolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidity",
          "type": "address"
        }
      ],
      "name": "revokeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keep3rHelper",
          "type": "address"
        }
      ],
      "name": "setKeep3rHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keep3rV1",
          "type": "address"
        }
      ],
      "name": "setKeep3rV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setKeep3rV1Governance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bonded",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "slash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9ba7bb04f832833407f6bec4160ff248902e391b19178e2af6c31990f481b403",
  "receipt": {
    "to": null,
    "from": "0x61562678214C2181279dE08e59BC6e2547Ae29b8",
    "contractAddress": "0xe663e02f868271bdDa54Df05B7B06360db8B1aC2",
    "transactionIndex": 8,
    "gasUsed": "1253731",
    "logsBloom": "0x
    "blockHash": "0xd9a0cd180ef881acbb8206ab319f34dbc5ea5ba46497dc1ef0ede8e1137f5826",
    "transactionHash": "0x9ba7bb04f832833407f6bec4160ff248902e391b19178e2af6c31990f481b403",
    "logs": [],
    "blockNumber": 10950136,
    "cumulativeGasUsed": "6756587",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0D5Dc686d0a2ABBfDaFDFb4D0533E886517d4E83",
    "0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44"
  ],
  "solcInputHash": "b9268e6d961ebe544c38cb3bddc9b2ce",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keep3rV1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Cooldown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoDrawableAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGovernance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMinter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPendingGovernance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pendingGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"GovernanceSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptKeep3rV1Governance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_job\",\"type\":\"address\"}],\"name\":\"addJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_job\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addKPRCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidity\",\"type\":\"address\"}],\"name\":\"approveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"caps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"draw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keep3rV1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"next\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipients\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipientsCaps\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"caps\",\"type\":\"uint256\"}],\"internalType\":\"struct IKeep3rV1Proxy.Recipient[]\",\"name\":\"_memory\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_job\",\"type\":\"address\"}],\"name\":\"removeJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"removeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"resolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidity\",\"type\":\"address\"}],\"name\":\"revokeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keep3rHelper\",\"type\":\"address\"}],\"name\":\"setKeep3rHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keep3rV1\",\"type\":\"address\"}],\"name\":\"setKeep3rV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setKeep3rV1Governance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bonded\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Keep3rV1Proxy.sol\":\"Keep3rV1Proxy\"},\"evmVersion\":\"berlin\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/Keep3rV1Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './interfaces/IKeep3rV1.sol';\\nimport './interfaces/IKeep3rV1Proxy.sol';\\nimport './peripherals/Keep3rGovernance.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\ncontract Keep3rV1Proxy is IKeep3rV1Proxy, Keep3rGovernance {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  address public override keep3rV1;\\n  address public override minter;\\n\\n  constructor(address _governance, address _keep3rV1) Keep3rGovernance(_governance) {\\n    keep3rV1 = _keep3rV1;\\n  }\\n\\n  mapping(address => uint256) public override caps;\\n\\n  mapping(address => uint256) public override next;\\n\\n  EnumerableSet.AddressSet internal _recipients;\\n\\n  function addRecipient(address recipient, uint256 amount) external override onlyGovernance {\\n    _recipients.add(recipient);\\n    caps[recipient] = amount;\\n  }\\n\\n  function removeRecipient(address recipient) external override onlyGovernance {\\n    _recipients.remove(recipient);\\n    delete caps[recipient];\\n  }\\n\\n  function recipients() external view override returns (address[] memory) {\\n    return _recipients.values();\\n  }\\n\\n  function recipientsCaps() external view override returns (Recipient[] memory _memory) {\\n    _memory = new Recipient[](_recipients.length());\\n    for (uint256 i; i < _recipients.length(); i++) {\\n      _memory[i] = (Recipient(_recipients.at(i), caps[_recipients.at(i)]));\\n    }\\n  }\\n\\n  function draw() external override returns (uint256 _amount) {\\n    if (block.timestamp < next[msg.sender]) revert Cooldown();\\n    if (caps[msg.sender] == 0) revert NoDrawableAmount();\\n    if ((block.timestamp - next[msg.sender]) > 1 weeks) {\\n      next[msg.sender] = block.timestamp + 1 weeks;\\n    } else {\\n      next[msg.sender] += 1 weeks;\\n    }\\n    _amount = caps[msg.sender];\\n    _mint(msg.sender, _amount);\\n  }\\n\\n  function setKeep3rV1(address _keep3rV1) external override onlyGovernance noZeroAddress(_keep3rV1) {\\n    keep3rV1 = _keep3rV1;\\n  }\\n\\n  function setMinter(address _minter) external override onlyGovernance noZeroAddress(_minter) {\\n    minter = _minter;\\n  }\\n\\n  function mint(uint256 _amount) external override onlyMinter {\\n    _mint(msg.sender, _amount);\\n  }\\n\\n  function mint(address _account, uint256 _amount) external override onlyGovernance {\\n    _mint(_account, _amount);\\n  }\\n\\n  function setKeep3rV1Governance(address _governance) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).setGovernance(_governance);\\n  }\\n\\n  function acceptKeep3rV1Governance() external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).acceptGovernance();\\n  }\\n\\n  function dispute(address _keeper) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).dispute(_keeper);\\n  }\\n\\n  function slash(\\n    address _bonded,\\n    address _keeper,\\n    uint256 _amount\\n  ) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).slash(_bonded, _keeper, _amount);\\n  }\\n\\n  function revoke(address _keeper) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).revoke(_keeper);\\n  }\\n\\n  function resolve(address _keeper) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).resolve(_keeper);\\n  }\\n\\n  function addJob(address _job) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).addJob(_job);\\n  }\\n\\n  function removeJob(address _job) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).removeJob(_job);\\n  }\\n\\n  function addKPRCredit(address _job, uint256 _amount) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).addKPRCredit(_job, _amount);\\n  }\\n\\n  function approveLiquidity(address _liquidity) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).approveLiquidity(_liquidity);\\n  }\\n\\n  function revokeLiquidity(address _liquidity) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).revokeLiquidity(_liquidity);\\n  }\\n\\n  function setKeep3rHelper(address _keep3rHelper) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).setKeep3rHelper(_keep3rHelper);\\n  }\\n\\n  function addVotes(address _voter, uint256 _amount) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).addVotes(_voter, _amount);\\n  }\\n\\n  function removeVotes(address _voter, uint256 _amount) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).removeVotes(_voter, _amount);\\n  }\\n\\n  modifier onlyMinter {\\n    if (msg.sender != minter) revert OnlyMinter();\\n    _;\\n  }\\n\\n  modifier noZeroAddress(address _address) {\\n    if (_address == address(0)) revert ZeroAddress();\\n    _;\\n  }\\n\\n  function _mint(address _account, uint256 _amount) internal {\\n    IKeep3rV1(keep3rV1).mint(_amount);\\n    IKeep3rV1(keep3rV1).transfer(_account, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0xef59bf716f0eacbf5755c56973f1f5b45770b39e6cdb10adadcac3dca3c65321\",\"license\":\"MIT\"},\"contracts/interfaces/IKeep3rV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\n// solhint-disable func-name-mixedcase\\ninterface IKeep3rV1 is IERC20, IERC20Metadata {\\n  // structs\\n  struct Checkpoint {\\n    uint32 fromBlock;\\n    uint256 votes;\\n  }\\n\\n  // events\\n  event DelegateChanged(address indexed _delegator, address indexed _fromDelegate, address indexed _toDelegate);\\n  event DelegateVotesChanged(address indexed _delegate, uint256 _previousBalance, uint256 _newBalance);\\n  event SubmitJob(address indexed _job, address indexed _liquidity, address indexed _provider, uint256 _block, uint256 _credit);\\n  event ApplyCredit(address indexed _job, address indexed _liquidity, address indexed _provider, uint256 _block, uint256 _credit);\\n  event RemoveJob(address indexed _job, address indexed _liquidity, address indexed _provider, uint256 _block, uint256 _credit);\\n  event UnbondJob(address indexed _job, address indexed _liquidity, address indexed _provider, uint256 _block, uint256 _credit);\\n  event JobAdded(address indexed _job, uint256 _block, address _governance);\\n  event JobRemoved(address indexed _job, uint256 _block, address _governance);\\n  event KeeperWorked(address indexed _credit, address indexed _job, address indexed _keeper, uint256 _block, uint256 _amount);\\n  event KeeperBonding(address indexed _keeper, uint256 _block, uint256 _active, uint256 _bond);\\n  event KeeperBonded(address indexed _keeper, uint256 _block, uint256 _activated, uint256 _bond);\\n  event KeeperUnbonding(address indexed _keeper, uint256 _block, uint256 _deactive, uint256 _bond);\\n  event KeeperUnbound(address indexed _keeper, uint256 _block, uint256 _deactivated, uint256 _bond);\\n  event KeeperSlashed(address indexed _keeper, address indexed _slasher, uint256 _block, uint256 _slash);\\n  event KeeperDispute(address indexed _keeper, uint256 _block);\\n  event KeeperResolved(address indexed _keeper, uint256 _block);\\n  event AddCredit(address indexed _credit, address indexed _job, address indexed _creditor, uint256 _block, uint256 _amount);\\n\\n  // variables\\n  function keep3rHelper() external returns (address);\\n\\n  function delegates(address _delegator) external view returns (address);\\n\\n  function checkpoints(address _account, uint32 _checkpoint) external view returns (Checkpoint memory);\\n\\n  function numCheckpoints(address _account) external view returns (uint32);\\n\\n  function DOMAIN_TYPEHASH() external returns (bytes32);\\n\\n  function DOMAINSEPARATOR() external returns (bytes32);\\n\\n  function DELEGATION_TYPEHASH() external returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external returns (bytes32);\\n\\n  function nonces(address _user) external view returns (uint256);\\n\\n  function BOND() external returns (uint256);\\n\\n  function UNBOND() external returns (uint256);\\n\\n  function LIQUIDITYBOND() external returns (uint256);\\n\\n  function FEE() external returns (uint256);\\n\\n  function BASE() external returns (uint256);\\n\\n  function ETH() external returns (address);\\n\\n  function bondings(address _user, address _bonding) external view returns (uint256);\\n\\n  function canWithdrawAfter(address _user, address _bonding) external view returns (uint256);\\n\\n  function pendingUnbondAmount(address _keeper, address _bonding) external view returns (uint256);\\n\\n  function pendingbonds(address _keeper, address _bonding) external view returns (uint256);\\n\\n  function bonds(address _keeper, address _bonding) external view returns (uint256);\\n\\n  function votes(address _delegator) external view returns (uint256);\\n\\n  function totalBonded() external returns (uint256);\\n\\n  function firstSeen(address _keeper) external view returns (uint256);\\n\\n  function disputes(address _keeper) external view returns (bool);\\n\\n  function lastJob(address _keeper) external view returns (uint256);\\n\\n  function workCompleted(address _keeper) external view returns (uint256);\\n\\n  function jobs(address _job) external view returns (bool);\\n\\n  function credits(address _job, address _credit) external view returns (uint256);\\n\\n  function liquidityProvided(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external view returns (uint256);\\n\\n  function liquidityUnbonding(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external view returns (uint256);\\n\\n  function liquidityAmountsUnbonding(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external view returns (uint256);\\n\\n  function jobProposalDelay(address _job) external view returns (uint256);\\n\\n  function liquidityApplied(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external view returns (uint256);\\n\\n  function liquidityAmount(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external view returns (uint256);\\n\\n  function keepers(address _keeper) external view returns (bool);\\n\\n  function blacklist(address _keeper) external view returns (bool);\\n\\n  function keeperList(uint256 _index) external view returns (address);\\n\\n  function jobList(uint256 _index) external view returns (address);\\n\\n  function governance() external returns (address);\\n\\n  function pendingGovernance() external returns (address);\\n\\n  function liquidityAccepted(address _liquidity) external view returns (bool);\\n\\n  function liquidityPairs(uint256 _index) external view returns (address);\\n\\n  // methods\\n  function getCurrentVotes(address _account) external view returns (uint256);\\n\\n  function addCreditETH(address _job) external payable;\\n\\n  function addCredit(\\n    address _credit,\\n    address _job,\\n    uint256 _amount\\n  ) external;\\n\\n  function addVotes(address _voter, uint256 _amount) external;\\n\\n  function removeVotes(address _voter, uint256 _amount) external;\\n\\n  function addKPRCredit(address _job, uint256 _amount) external;\\n\\n  function approveLiquidity(address _liquidity) external;\\n\\n  function revokeLiquidity(address _liquidity) external;\\n\\n  function pairs() external view returns (address[] memory);\\n\\n  function addLiquidityToJob(\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) external;\\n\\n  function applyCreditToJob(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external;\\n\\n  function unbondLiquidityFromJob(\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) external;\\n\\n  function removeLiquidityFromJob(address _liquidity, address _job) external;\\n\\n  function mint(uint256 _amount) external;\\n\\n  function burn(uint256 _amount) external;\\n\\n  function worked(address _keeper) external;\\n\\n  function receipt(\\n    address _credit,\\n    address _keeper,\\n    uint256 _amount\\n  ) external;\\n\\n  function receiptETH(address _keeper, uint256 _amount) external;\\n\\n  function addJob(address _job) external;\\n\\n  function getJobs() external view returns (address[] memory);\\n\\n  function removeJob(address _job) external;\\n\\n  function setKeep3rHelper(address _keep3rHelper) external;\\n\\n  function setGovernance(address _governance) external;\\n\\n  function acceptGovernance() external;\\n\\n  function isKeeper(address _keeper) external returns (bool);\\n\\n  function isMinKeeper(\\n    address _keeper,\\n    uint256 _minBond,\\n    uint256 _earned,\\n    uint256 _age\\n  ) external returns (bool);\\n\\n  function isBondedKeeper(\\n    address _keeper,\\n    address _bond,\\n    uint256 _minBond,\\n    uint256 _earned,\\n    uint256 _age\\n  ) external returns (bool);\\n\\n  function bond(address _bonding, uint256 _amount) external;\\n\\n  function getKeepers() external view returns (address[] memory);\\n\\n  function activate(address _bonding) external;\\n\\n  function unbond(address _bonding, uint256 _amount) external;\\n\\n  function slash(\\n    address _bonded,\\n    address _keeper,\\n    uint256 _amount\\n  ) external;\\n\\n  function withdraw(address _bonding) external;\\n\\n  function dispute(address _keeper) external;\\n\\n  function revoke(address _keeper) external;\\n\\n  function resolve(address _keeper) external;\\n\\n  function permit(\\n    address _owner,\\n    address _spender,\\n    uint256 _amount,\\n    uint256 _deadline,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s\\n  ) external;\\n}\\n\",\"keccak256\":\"0x0ef0f0dbe798e8b6c2cfb95d721209ce7657237628b97e72a919be4b51a44aa5\",\"license\":\"MIT\"},\"contracts/interfaces/IKeep3rV1Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './peripherals/IKeep3rGovernance.sol';\\n\\ninterface IKeep3rV1Proxy is IKeep3rGovernance {\\n  // structs\\n  struct Recipient {\\n    address recipient;\\n    uint256 caps;\\n  }\\n\\n  // variables\\n  function keep3rV1() external view returns (address);\\n\\n  function minter() external view returns (address);\\n\\n  function next(address) external view returns (uint256);\\n\\n  function caps(address) external view returns (uint256);\\n\\n  function recipients() external view returns (address[] memory);\\n\\n  function recipientsCaps() external view returns (Recipient[] memory);\\n\\n  // errors\\n  error Cooldown();\\n  error NoDrawableAmount();\\n  error ZeroAddress();\\n  error OnlyMinter();\\n\\n  // methods\\n  function addRecipient(address recipient, uint256 amount) external;\\n\\n  function removeRecipient(address recipient) external;\\n\\n  function draw() external returns (uint256 _amount);\\n\\n  function setKeep3rV1(address _keep3rV1) external;\\n\\n  function setMinter(address _minter) external;\\n\\n  function mint(uint256 _amount) external;\\n\\n  function mint(address _account, uint256 _amount) external;\\n\\n  function setKeep3rV1Governance(address _governance) external;\\n\\n  function acceptKeep3rV1Governance() external;\\n\\n  function dispute(address _keeper) external;\\n\\n  function slash(\\n    address _bonded,\\n    address _keeper,\\n    uint256 _amount\\n  ) external;\\n\\n  function revoke(address _keeper) external;\\n\\n  function resolve(address _keeper) external;\\n\\n  function addJob(address _job) external;\\n\\n  function removeJob(address _job) external;\\n\\n  function addKPRCredit(address _job, uint256 _amount) external;\\n\\n  function approveLiquidity(address _liquidity) external;\\n\\n  function revokeLiquidity(address _liquidity) external;\\n\\n  function setKeep3rHelper(address _keep3rHelper) external;\\n\\n  function addVotes(address _voter, uint256 _amount) external;\\n\\n  function removeVotes(address _voter, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xebc2b6cbabacb7e55384375d9bde16552cb3b2fe5bd06b5d3bae3b15480ab12c\",\"license\":\"MIT\"},\"contracts/interfaces/peripherals/IKeep3rGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IKeep3rGovernance {\\n  // events\\n  event GovernanceSet(address _governance);\\n  event GovernanceProposal(address _pendingGovernance);\\n\\n  // variables\\n  function governance() external view returns (address);\\n\\n  function pendingGovernance() external view returns (address);\\n\\n  // errors\\n  error OnlyGovernance();\\n  error OnlyPendingGovernance();\\n\\n  // methods\\n  function setGovernance(address _governance) external;\\n\\n  function acceptGovernance() external;\\n}\\n\",\"keccak256\":\"0xc6c7fd1e1734be562f64a59a584a247d1641ee596ba486d469b14dc8e3394449\",\"license\":\"MIT\"},\"contracts/peripherals/Keep3rGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '../interfaces/peripherals/IKeep3rGovernance.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nabstract contract Keep3rGovernance is IKeep3rGovernance {\\n  address public override governance;\\n  address public override pendingGovernance;\\n\\n  constructor(address _governance) {\\n    governance = _governance;\\n  }\\n\\n  function setGovernance(address _governance) external override onlyGovernance {\\n    pendingGovernance = _governance;\\n    emit GovernanceProposal(_governance);\\n  }\\n\\n  function acceptGovernance() external override onlyPendingGovernance {\\n    governance = pendingGovernance;\\n    delete pendingGovernance;\\n    emit GovernanceSet(governance);\\n  }\\n\\n  modifier onlyGovernance {\\n    if (msg.sender != governance) revert OnlyGovernance();\\n    _;\\n  }\\n\\n  modifier onlyPendingGovernance {\\n    if (msg.sender != pendingGovernance) revert OnlyPendingGovernance();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa0e56c41d036374bcf08fc166937b1082fc3be92776957bfead93ebf3078bc19\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161159938038061159983398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b6114db806100be6000396000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c8063807119891161010f578063d8ae6faf116100a2578063f39c38a011610071578063f39c38a014610415578063f75f9f7b14610428578063f79822431461043b578063fca3b5aa1461044e57600080fd5b8063d8ae6faf146103c9578063de63298d146103dc578063e74f8239146103ef578063ec00cdfc1461040257600080fd5b8063b600702a116100de578063b600702a1461037b578063ba9b4d651461038e578063c5198abc146103a3578063ce6a0880146103b657600080fd5b80638071198914610322578063a0712d6814610335578063ab033ea914610348578063ab73e3161461035b57600080fd5b80633619cb721161018757806364bb43ee1161015657806364bb43ee146102c957806366d97b21146102dc57806372da828a146102fc57806374a8f1031461030f57600080fd5b80633619cb721461028857806340c10f191461029057806355ea6c47146102a35780635aa6e675146102b657600080fd5b80630eecae21116101c35780630eecae211461024457806312a291981461025a5780631ef94b911461026d578063238efcbc1461028057600080fd5b806307546172146101ea5780630770f8091461021a5780630e57d4ce1461022f575b600080fd5b6003546101fd906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61022d6102283660046112a2565b610461565b005b6102376104ef565b604051610211919061135e565b61024c610500565b604051908152602001610211565b61022d6102683660046112a2565b6105eb565b6002546101fd906001600160a01b031681565b61022d61063c565b61022d6106c5565b61022d61029e3660046112f9565b61075a565b61022d6102b13660046112a2565b610793565b6000546101fd906001600160a01b031681565b61022d6102d73660046112a2565b6107f0565b61024c6102ea3660046112a2565b60046020526000908152604090205481565b61022d61030a3660046112a2565b61084d565b61022d61031d3660046112a2565b6108aa565b61022d6103303660046112a2565b610907565b61022d610343366004611345565b610964565b61022d6103563660046112a2565b61099c565b61024c6103693660046112a2565b60056020526000908152604090205481565b61022d6103893660046112a2565b610a1b565b610396610a78565b60405161021191906113ab565b61022d6103b13660046112a2565b610b83565b61022d6103c43660046112f9565b610be0565b61022d6103d73660046112f9565b610c76565b61022d6103ea3660046112f9565b610cda565b61022d6103fd3660046112bd565b610d3e565b61022d6104103660046112a2565b610ddc565b6001546101fd906001600160a01b031681565b61022d6104363660046112a2565b610e52565b61022d6104493660046112f9565b610eaf565b61022d61045c3660046112a2565b610f02565b6000546001600160a01b0316331461048c576040516354348f0360e01b815260040160405180910390fd5b60025460405163ab033ea960e01b81526001600160a01b0383811660048301529091169063ab033ea9906024015b600060405180830381600087803b1580156104d457600080fd5b505af11580156104e8573d6000803e3d6000fd5b5050505050565b60606104fb6006610f78565b905090565b336000908152600560205260408120544210156105305760405163b0782df760e01b815260040160405180910390fd5b3360009081526004602052604090205461055d57604051633faaf86560e21b815260040160405180910390fd5b3360009081526005602052604090205462093a809061057c904261141b565b11156105a45761058f4262093a80611403565b336000908152600560205260409020556105cc565b336000908152600560205260408120805462093a8092906105c6908490611403565b90915550505b5033600081815260046020526040902054906105e89082610f8c565b90565b6000546001600160a01b03163314610616576040516354348f0360e01b815260040160405180910390fd5b610621600682611075565b506001600160a01b0316600090815260046020526040812055565b6001546001600160a01b0316331461066757604051637ef5703160e11b815260040160405180910390fd5b60018054600080546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527fc73be659241aade67e9a059bcf21494955018b213dbd1179054ccf928b13f3b69060200160405180910390a1565b6000546001600160a01b031633146106f0576040516354348f0360e01b815260040160405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663238efcbc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561074057600080fd5b505af1158015610754573d6000803e3d6000fd5b50505050565b6000546001600160a01b03163314610785576040516354348f0360e01b815260040160405180910390fd5b61078f8282610f8c565b5050565b6000546001600160a01b031633146107be576040516354348f0360e01b815260040160405180910390fd5b6002546040516355ea6c4760e01b81526001600160a01b038381166004830152909116906355ea6c47906024016104ba565b6000546001600160a01b0316331461081b576040516354348f0360e01b815260040160405180910390fd5b60025460405163325da1f760e11b81526001600160a01b038381166004830152909116906364bb43ee906024016104ba565b6000546001600160a01b03163314610878576040516354348f0360e01b815260040160405180910390fd5b60025460405163396d414560e11b81526001600160a01b038381166004830152909116906372da828a906024016104ba565b6000546001600160a01b031633146108d5576040516354348f0360e01b815260040160405180910390fd5b6002546040516374a8f10360e01b81526001600160a01b038381166004830152909116906374a8f103906024016104ba565b6000546001600160a01b03163314610932576040516354348f0360e01b815260040160405180910390fd5b600254604051638071198960e01b81526001600160a01b038381166004830152909116906380711989906024016104ba565b6003546001600160a01b0316331461098f57604051639cdc2ed560e01b815260040160405180910390fd5b6109993382610f8c565b50565b6000546001600160a01b031633146109c7576040516354348f0360e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fe987aaedf9d279143bdf1eee16cf1d0feb47742867d81083df8d6cd0a5ac857f9060200160405180910390a150565b6000546001600160a01b03163314610a46576040516354348f0360e01b815260040160405180910390fd5b600254604051635b00381560e11b81526001600160a01b0383811660048301529091169063b600702a906024016104ba565b6060610a846006611093565b67ffffffffffffffff811115610a9c57610a9c61148f565b604051908082528060200260200182016040528015610ae157816020015b6040805180820190915260008082526020820152815260200190600190039081610aba5790505b50905060005b610af16006611093565b811015610b7f576040805180820190915280610b0e60068461109d565b6001600160a01b0316815260200160046000610b2b60068661109d565b6001600160a01b03166001600160a01b0316815260200190815260200160002054815250828281518110610b6157610b61611479565b60200260200101819052508080610b7790611432565b915050610ae7565b5090565b6000546001600160a01b03163314610bae576040516354348f0360e01b815260040160405180910390fd5b60025460405163314662af60e21b81526001600160a01b0383811660048301529091169063c5198abc906024016104ba565b6000546001600160a01b03163314610c0b576040516354348f0360e01b815260040160405180910390fd5b60025460405163019cd41160e71b81526001600160a01b038481166004830152602482018490529091169063ce6a0880906044015b600060405180830381600087803b158015610c5a57600080fd5b505af1158015610c6e573d6000803e3d6000fd5b505050505050565b6000546001600160a01b03163314610ca1576040516354348f0360e01b815260040160405180910390fd5b60025460405163d8ae6faf60e01b81526001600160a01b038481166004830152602482018490529091169063d8ae6faf90604401610c40565b6000546001600160a01b03163314610d05576040516354348f0360e01b815260040160405180910390fd5b60025460405163de63298d60e01b81526001600160a01b038481166004830152602482018490529091169063de63298d90604401610c40565b6000546001600160a01b03163314610d69576040516354348f0360e01b815260040160405180910390fd5b60025460405163e74f823960e01b81526001600160a01b0385811660048301528481166024830152604482018490529091169063e74f823990606401600060405180830381600087803b158015610dbf57600080fd5b505af1158015610dd3573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b03163314610e07576040516354348f0360e01b815260040160405180910390fd5b806001600160a01b038116610e2f5760405163d92e233d60e01b815260040160405180910390fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610e7d576040516354348f0360e01b815260040160405180910390fd5b60025460405163f75f9f7b60e01b81526001600160a01b0383811660048301529091169063f75f9f7b906024016104ba565b6000546001600160a01b03163314610eda576040516354348f0360e01b815260040160405180910390fd5b610ee56006836110a9565b506001600160a01b03909116600090815260046020526040902055565b6000546001600160a01b03163314610f2d576040516354348f0360e01b815260040160405180910390fd5b806001600160a01b038116610f555760405163d92e233d60e01b815260040160405180910390fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b60606000610f85836110be565b9392505050565b60025460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401600060405180830381600087803b158015610fd257600080fd5b505af1158015610fe6573d6000803e3d6000fd5b505060025460405163a9059cbb60e01b81526001600160a01b03868116600483015260248201869052909116925063a9059cbb9150604401602060405180830381600087803b15801561103857600080fd5b505af115801561104c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110709190611323565b505050565b600061108a836001600160a01b03841661111a565b90505b92915050565b600061108d825490565b600061108a838361120d565b600061108a836001600160a01b038416611237565b60608160000180548060200260200160405190810160405280929190818152602001828054801561110e57602002820191906000526020600020905b8154815260200190600101908083116110fa575b50505050509050919050565b6000818152600183016020526040812054801561120357600061113e60018361141b565b85549091506000906111529060019061141b565b90508181146111b757600086600001828154811061117257611172611479565b906000526020600020015490508087600001848154811061119557611195611479565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806111c8576111c8611463565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061108d565b600091505061108d565b600082600001828154811061122457611224611479565b9060005260206000200154905092915050565b600081815260018301602052604081205461127e5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561108d565b50600061108d565b80356001600160a01b038116811461129d57600080fd5b919050565b6000602082840312156112b457600080fd5b61108a82611286565b6000806000606084860312156112d257600080fd5b6112db84611286565b92506112e960208501611286565b9150604084013590509250925092565b6000806040838503121561130c57600080fd5b61131583611286565b946020939093013593505050565b60006020828403121561133557600080fd5b81518015158114610f8557600080fd5b60006020828403121561135757600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561139f5783516001600160a01b03168352928401929184019160010161137a565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b828110156113f657815180516001600160a01b031685528601518685015292840192908501906001016113c8565b5091979650505050505050565b600082198211156114165761141661144d565b500190565b60008282101561142d5761142d61144d565b500390565b60006000198214156114465761144661144d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c57b177fe3c8d3332a669664e1befee90f12721dc6d44e4f1543887e2a91b70c64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c8063807119891161010f578063d8ae6faf116100a2578063f39c38a011610071578063f39c38a014610415578063f75f9f7b14610428578063f79822431461043b578063fca3b5aa1461044e57600080fd5b8063d8ae6faf146103c9578063de63298d146103dc578063e74f8239146103ef578063ec00cdfc1461040257600080fd5b8063b600702a116100de578063b600702a1461037b578063ba9b4d651461038e578063c5198abc146103a3578063ce6a0880146103b657600080fd5b80638071198914610322578063a0712d6814610335578063ab033ea914610348578063ab73e3161461035b57600080fd5b80633619cb721161018757806364bb43ee1161015657806364bb43ee146102c957806366d97b21146102dc57806372da828a146102fc57806374a8f1031461030f57600080fd5b80633619cb721461028857806340c10f191461029057806355ea6c47146102a35780635aa6e675146102b657600080fd5b80630eecae21116101c35780630eecae211461024457806312a291981461025a5780631ef94b911461026d578063238efcbc1461028057600080fd5b806307546172146101ea5780630770f8091461021a5780630e57d4ce1461022f575b600080fd5b6003546101fd906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61022d6102283660046112a2565b610461565b005b6102376104ef565b604051610211919061135e565b61024c610500565b604051908152602001610211565b61022d6102683660046112a2565b6105eb565b6002546101fd906001600160a01b031681565b61022d61063c565b61022d6106c5565b61022d61029e3660046112f9565b61075a565b61022d6102b13660046112a2565b610793565b6000546101fd906001600160a01b031681565b61022d6102d73660046112a2565b6107f0565b61024c6102ea3660046112a2565b60046020526000908152604090205481565b61022d61030a3660046112a2565b61084d565b61022d61031d3660046112a2565b6108aa565b61022d6103303660046112a2565b610907565b61022d610343366004611345565b610964565b61022d6103563660046112a2565b61099c565b61024c6103693660046112a2565b60056020526000908152604090205481565b61022d6103893660046112a2565b610a1b565b610396610a78565b60405161021191906113ab565b61022d6103b13660046112a2565b610b83565b61022d6103c43660046112f9565b610be0565b61022d6103d73660046112f9565b610c76565b61022d6103ea3660046112f9565b610cda565b61022d6103fd3660046112bd565b610d3e565b61022d6104103660046112a2565b610ddc565b6001546101fd906001600160a01b031681565b61022d6104363660046112a2565b610e52565b61022d6104493660046112f9565b610eaf565b61022d61045c3660046112a2565b610f02565b6000546001600160a01b0316331461048c576040516354348f0360e01b815260040160405180910390fd5b60025460405163ab033ea960e01b81526001600160a01b0383811660048301529091169063ab033ea9906024015b600060405180830381600087803b1580156104d457600080fd5b505af11580156104e8573d6000803e3d6000fd5b5050505050565b60606104fb6006610f78565b905090565b336000908152600560205260408120544210156105305760405163b0782df760e01b815260040160405180910390fd5b3360009081526004602052604090205461055d57604051633faaf86560e21b815260040160405180910390fd5b3360009081526005602052604090205462093a809061057c904261141b565b11156105a45761058f4262093a80611403565b336000908152600560205260409020556105cc565b336000908152600560205260408120805462093a8092906105c6908490611403565b90915550505b5033600081815260046020526040902054906105e89082610f8c565b90565b6000546001600160a01b03163314610616576040516354348f0360e01b815260040160405180910390fd5b610621600682611075565b506001600160a01b0316600090815260046020526040812055565b6001546001600160a01b0316331461066757604051637ef5703160e11b815260040160405180910390fd5b60018054600080546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527fc73be659241aade67e9a059bcf21494955018b213dbd1179054ccf928b13f3b69060200160405180910390a1565b6000546001600160a01b031633146106f0576040516354348f0360e01b815260040160405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663238efcbc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561074057600080fd5b505af1158015610754573d6000803e3d6000fd5b50505050565b6000546001600160a01b03163314610785576040516354348f0360e01b815260040160405180910390fd5b61078f8282610f8c565b5050565b6000546001600160a01b031633146107be576040516354348f0360e01b815260040160405180910390fd5b6002546040516355ea6c4760e01b81526001600160a01b038381166004830152909116906355ea6c47906024016104ba565b6000546001600160a01b0316331461081b576040516354348f0360e01b815260040160405180910390fd5b60025460405163325da1f760e11b81526001600160a01b038381166004830152909116906364bb43ee906024016104ba565b6000546001600160a01b03163314610878576040516354348f0360e01b815260040160405180910390fd5b60025460405163396d414560e11b81526001600160a01b038381166004830152909116906372da828a906024016104ba565b6000546001600160a01b031633146108d5576040516354348f0360e01b815260040160405180910390fd5b6002546040516374a8f10360e01b81526001600160a01b038381166004830152909116906374a8f103906024016104ba565b6000546001600160a01b03163314610932576040516354348f0360e01b815260040160405180910390fd5b600254604051638071198960e01b81526001600160a01b038381166004830152909116906380711989906024016104ba565b6003546001600160a01b0316331461098f57604051639cdc2ed560e01b815260040160405180910390fd5b6109993382610f8c565b50565b6000546001600160a01b031633146109c7576040516354348f0360e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fe987aaedf9d279143bdf1eee16cf1d0feb47742867d81083df8d6cd0a5ac857f9060200160405180910390a150565b6000546001600160a01b03163314610a46576040516354348f0360e01b815260040160405180910390fd5b600254604051635b00381560e11b81526001600160a01b0383811660048301529091169063b600702a906024016104ba565b6060610a846006611093565b67ffffffffffffffff811115610a9c57610a9c61148f565b604051908082528060200260200182016040528015610ae157816020015b6040805180820190915260008082526020820152815260200190600190039081610aba5790505b50905060005b610af16006611093565b811015610b7f576040805180820190915280610b0e60068461109d565b6001600160a01b0316815260200160046000610b2b60068661109d565b6001600160a01b03166001600160a01b0316815260200190815260200160002054815250828281518110610b6157610b61611479565b60200260200101819052508080610b7790611432565b915050610ae7565b5090565b6000546001600160a01b03163314610bae576040516354348f0360e01b815260040160405180910390fd5b60025460405163314662af60e21b81526001600160a01b0383811660048301529091169063c5198abc906024016104ba565b6000546001600160a01b03163314610c0b576040516354348f0360e01b815260040160405180910390fd5b60025460405163019cd41160e71b81526001600160a01b038481166004830152602482018490529091169063ce6a0880906044015b600060405180830381600087803b158015610c5a57600080fd5b505af1158015610c6e573d6000803e3d6000fd5b505050505050565b6000546001600160a01b03163314610ca1576040516354348f0360e01b815260040160405180910390fd5b60025460405163d8ae6faf60e01b81526001600160a01b038481166004830152602482018490529091169063d8ae6faf90604401610c40565b6000546001600160a01b03163314610d05576040516354348f0360e01b815260040160405180910390fd5b60025460405163de63298d60e01b81526001600160a01b038481166004830152602482018490529091169063de63298d90604401610c40565b6000546001600160a01b03163314610d69576040516354348f0360e01b815260040160405180910390fd5b60025460405163e74f823960e01b81526001600160a01b0385811660048301528481166024830152604482018490529091169063e74f823990606401600060405180830381600087803b158015610dbf57600080fd5b505af1158015610dd3573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b03163314610e07576040516354348f0360e01b815260040160405180910390fd5b806001600160a01b038116610e2f5760405163d92e233d60e01b815260040160405180910390fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610e7d576040516354348f0360e01b815260040160405180910390fd5b60025460405163f75f9f7b60e01b81526001600160a01b0383811660048301529091169063f75f9f7b906024016104ba565b6000546001600160a01b03163314610eda576040516354348f0360e01b815260040160405180910390fd5b610ee56006836110a9565b506001600160a01b03909116600090815260046020526040902055565b6000546001600160a01b03163314610f2d576040516354348f0360e01b815260040160405180910390fd5b806001600160a01b038116610f555760405163d92e233d60e01b815260040160405180910390fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b60606000610f85836110be565b9392505050565b60025460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401600060405180830381600087803b158015610fd257600080fd5b505af1158015610fe6573d6000803e3d6000fd5b505060025460405163a9059cbb60e01b81526001600160a01b03868116600483015260248201869052909116925063a9059cbb9150604401602060405180830381600087803b15801561103857600080fd5b505af115801561104c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110709190611323565b505050565b600061108a836001600160a01b03841661111a565b90505b92915050565b600061108d825490565b600061108a838361120d565b600061108a836001600160a01b038416611237565b60608160000180548060200260200160405190810160405280929190818152602001828054801561110e57602002820191906000526020600020905b8154815260200190600101908083116110fa575b50505050509050919050565b6000818152600183016020526040812054801561120357600061113e60018361141b565b85549091506000906111529060019061141b565b90508181146111b757600086600001828154811061117257611172611479565b906000526020600020015490508087600001848154811061119557611195611479565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806111c8576111c8611463565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061108d565b600091505061108d565b600082600001828154811061122457611224611479565b9060005260206000200154905092915050565b600081815260018301602052604081205461127e5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561108d565b50600061108d565b80356001600160a01b038116811461129d57600080fd5b919050565b6000602082840312156112b457600080fd5b61108a82611286565b6000806000606084860312156112d257600080fd5b6112db84611286565b92506112e960208501611286565b9150604084013590509250925092565b6000806040838503121561130c57600080fd5b61131583611286565b946020939093013593505050565b60006020828403121561133557600080fd5b81518015158114610f8557600080fd5b60006020828403121561135757600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561139f5783516001600160a01b03168352928401929184019160010161137a565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b828110156113f657815180516001600160a01b031685528601518685015292840192908501906001016113c8565b5091979650505050505050565b600082198211156114165761141661144d565b500190565b60008282101561142d5761142d61144d565b500390565b60006000198214156114465761144661144d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c57b177fe3c8d3332a669664e1befee90f12721dc6d44e4f1543887e2a91b70c64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2246,
        "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
        "label": "governance",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2249,
        "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
        "label": "pendingGovernance",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 718,
        "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
        "label": "keep3rV1",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 721,
        "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
        "label": "minter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 741,
        "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
        "label": "caps",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 746,
        "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
        "label": "next",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 749,
        "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
        "label": "_recipients",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(AddressSet)414_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)414_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 413,
            "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)113_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)113_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 108,
            "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 112,
            "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}