{
  "address": "0x976b01c02c636Dd5901444B941442FD70b86dcd5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_keep3rV1",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Cooldown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoDrawableAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyGovernance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyMinter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyPendingGovernance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "DustSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pendingGovernance",
          "type": "address"
        }
      ],
      "name": "GovernanceProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "GovernanceSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptKeep3rV1Governance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_job",
          "type": "address"
        }
      ],
      "name": "addJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_job",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addKPRCredit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidity",
          "type": "address"
        }
      ],
      "name": "approveLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "caps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "dispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "draw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keep3rV1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "next",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipients",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipientsCaps",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "caps",
              "type": "uint256"
            }
          ],
          "internalType": "struct IKeep3rV1Proxy.Recipient[]",
          "name": "_memory",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_job",
          "type": "address"
        }
      ],
      "name": "removeJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "removeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "resolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidity",
          "type": "address"
        }
      ],
      "name": "revokeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "sendDust",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keep3rHelper",
          "type": "address"
        }
      ],
      "name": "setKeep3rHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keep3rV1",
          "type": "address"
        }
      ],
      "name": "setKeep3rV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setKeep3rV1Governance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "setMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bonded",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "slash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0170dcc50dcd0071767a39ea1c6aa570e0c391a4d1235a96b5776044247fe0af",
  "receipt": {
    "to": null,
    "from": "0x54054EA2db6eDC336cB87966815FD66Cc337f224",
    "contractAddress": "0x976b01c02c636Dd5901444B941442FD70b86dcd5",
    "transactionIndex": 109,
    "gasUsed": "1505192",
    "logsBloom": "0x
    "blockHash": "0xef89cce64e199f1122c3f39557950a6cc29a55df5fde7396f3c9a2feea61f7c7",
    "transactionHash": "0x0170dcc50dcd0071767a39ea1c6aa570e0c391a4d1235a96b5776044247fe0af",
    "logs": [],
    "blockNumber": 14519301,
    "cumulativeGasUsed": "9279594",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0D5Dc686d0a2ABBfDaFDFb4D0533E886517d4E83",
    "0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44"
  ],
  "numDeployments": 2,
  "solcInputHash": "d68cdcc83b8485f178bf40cf900adfd5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keep3rV1\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Cooldown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoDrawableAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyGovernance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMinter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPendingGovernance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"DustSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pendingGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"GovernanceSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptKeep3rV1Governance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_job\",\"type\":\"address\"}],\"name\":\"addJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_job\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addKPRCredit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidity\",\"type\":\"address\"}],\"name\":\"approveLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"caps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"draw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keep3rV1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"next\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipients\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipientsCaps\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"caps\",\"type\":\"uint256\"}],\"internalType\":\"struct IKeep3rV1Proxy.Recipient[]\",\"name\":\"_memory\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_job\",\"type\":\"address\"}],\"name\":\"removeJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"removeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"resolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidity\",\"type\":\"address\"}],\"name\":\"revokeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"sendDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keep3rHelper\",\"type\":\"address\"}],\"name\":\"setKeep3rHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keep3rV1\",\"type\":\"address\"}],\"name\":\"setKeep3rV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setKeep3rV1Governance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bonded\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"sendDust(address,uint256,address)\":{\"params\":{\"_amount\":\"The amount of the token that will be transferred\",\"_to\":\"The address that will receive the idle funds\",\"_token\":\"The token that will be transferred\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ZeroAddress()\":[{\"notice\":\"Throws if a variable is assigned to the zero address\"}]},\"events\":{\"DustSent(address,uint256,address)\":{\"notice\":\"Emitted when dust is sent\"}},\"kind\":\"user\",\"methods\":{\"sendDust(address,uint256,address)\":{\"notice\":\"Allows an authorized user to transfer the tokens or eth that may have been left in a contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Keep3rV1Proxy.sol\":\"Keep3rV1Proxy\"},\"evmVersion\":\"berlin\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x3778dc944f4a696335878bad8beca60f38b7c79b7a0bd8ddbeb618bd502a95ae\",\"license\":\"MIT\"},\"contracts/Keep3rV1Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './interfaces/IKeep3rV1.sol';\\nimport './interfaces/IKeep3rV1Proxy.sol';\\nimport './peripherals/Keep3rGovernance.sol';\\nimport './peripherals/DustCollector.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\ncontract Keep3rV1Proxy is IKeep3rV1Proxy, Keep3rGovernance, DustCollector {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  address public override keep3rV1;\\n  address public override minter;\\n\\n  constructor(address _governance, address _keep3rV1) Keep3rGovernance(_governance) {\\n    keep3rV1 = _keep3rV1;\\n  }\\n\\n  mapping(address => uint256) public override caps;\\n\\n  mapping(address => uint256) public override next;\\n\\n  EnumerableSet.AddressSet internal _recipients;\\n\\n  function addRecipient(address recipient, uint256 amount) external override onlyGovernance {\\n    _recipients.add(recipient);\\n    caps[recipient] = amount;\\n  }\\n\\n  function removeRecipient(address recipient) external override onlyGovernance {\\n    _recipients.remove(recipient);\\n    delete caps[recipient];\\n  }\\n\\n  function recipients() external view override returns (address[] memory) {\\n    return _recipients.values();\\n  }\\n\\n  function recipientsCaps() external view override returns (Recipient[] memory _memory) {\\n    _memory = new Recipient[](_recipients.length());\\n    for (uint256 i; i < _recipients.length(); i++) {\\n      _memory[i] = (Recipient(_recipients.at(i), caps[_recipients.at(i)]));\\n    }\\n  }\\n\\n  function draw() external override returns (uint256 _amount) {\\n    if (block.timestamp < next[msg.sender]) revert Cooldown();\\n    if (caps[msg.sender] == 0) revert NoDrawableAmount();\\n    if ((block.timestamp - next[msg.sender]) > 1 weeks) {\\n      next[msg.sender] = block.timestamp + 1 weeks;\\n    } else {\\n      next[msg.sender] += 1 weeks;\\n    }\\n    _amount = caps[msg.sender];\\n    _mint(msg.sender, _amount);\\n  }\\n\\n  function setKeep3rV1(address _keep3rV1) external override onlyGovernance noZeroAddress(_keep3rV1) {\\n    keep3rV1 = _keep3rV1;\\n  }\\n\\n  function setMinter(address _minter) external override onlyGovernance noZeroAddress(_minter) {\\n    minter = _minter;\\n  }\\n\\n  function mint(uint256 _amount) external override onlyMinter {\\n    _mint(msg.sender, _amount);\\n  }\\n\\n  function mint(address _account, uint256 _amount) external override onlyGovernance {\\n    _mint(_account, _amount);\\n  }\\n\\n  function setKeep3rV1Governance(address _governance) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).setGovernance(_governance);\\n  }\\n\\n  function acceptKeep3rV1Governance() external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).acceptGovernance();\\n  }\\n\\n  function dispute(address _keeper) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).dispute(_keeper);\\n  }\\n\\n  function slash(\\n    address _bonded,\\n    address _keeper,\\n    uint256 _amount\\n  ) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).slash(_bonded, _keeper, _amount);\\n  }\\n\\n  function revoke(address _keeper) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).revoke(_keeper);\\n  }\\n\\n  function resolve(address _keeper) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).resolve(_keeper);\\n  }\\n\\n  function addJob(address _job) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).addJob(_job);\\n  }\\n\\n  function removeJob(address _job) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).removeJob(_job);\\n  }\\n\\n  function addKPRCredit(address _job, uint256 _amount) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).addKPRCredit(_job, _amount);\\n  }\\n\\n  function approveLiquidity(address _liquidity) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).approveLiquidity(_liquidity);\\n  }\\n\\n  function revokeLiquidity(address _liquidity) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).revokeLiquidity(_liquidity);\\n  }\\n\\n  function setKeep3rHelper(address _keep3rHelper) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).setKeep3rHelper(_keep3rHelper);\\n  }\\n\\n  function addVotes(address _voter, uint256 _amount) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).addVotes(_voter, _amount);\\n  }\\n\\n  function removeVotes(address _voter, uint256 _amount) external override onlyGovernance {\\n    IKeep3rV1(keep3rV1).removeVotes(_voter, _amount);\\n  }\\n\\n  modifier onlyMinter {\\n    if (msg.sender != minter) revert OnlyMinter();\\n    _;\\n  }\\n\\n  modifier noZeroAddress(address _address) {\\n    if (_address == address(0)) revert ZeroAddress();\\n    _;\\n  }\\n\\n  function _mint(address _account, uint256 _amount) internal {\\n    IKeep3rV1(keep3rV1).mint(_amount);\\n    IKeep3rV1(keep3rV1).transfer(_account, _amount);\\n  }\\n}\\n\",\"keccak256\":\"0xd2f4b790bdc01a5d9f4b966ba3bbc20ce6b407710e52e352ad6f914a7f1dbd74\",\"license\":\"MIT\"},\"contracts/interfaces/IKeep3rV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\\n\\n// solhint-disable func-name-mixedcase\\ninterface IKeep3rV1 is IERC20, IERC20Metadata {\\n  // structs\\n  struct Checkpoint {\\n    uint32 fromBlock;\\n    uint256 votes;\\n  }\\n\\n  // events\\n  event DelegateChanged(address indexed _delegator, address indexed _fromDelegate, address indexed _toDelegate);\\n  event DelegateVotesChanged(address indexed _delegate, uint256 _previousBalance, uint256 _newBalance);\\n  event SubmitJob(address indexed _job, address indexed _liquidity, address indexed _provider, uint256 _block, uint256 _credit);\\n  event ApplyCredit(address indexed _job, address indexed _liquidity, address indexed _provider, uint256 _block, uint256 _credit);\\n  event RemoveJob(address indexed _job, address indexed _liquidity, address indexed _provider, uint256 _block, uint256 _credit);\\n  event UnbondJob(address indexed _job, address indexed _liquidity, address indexed _provider, uint256 _block, uint256 _credit);\\n  event JobAdded(address indexed _job, uint256 _block, address _governance);\\n  event JobRemoved(address indexed _job, uint256 _block, address _governance);\\n  event KeeperWorked(address indexed _credit, address indexed _job, address indexed _keeper, uint256 _block, uint256 _amount);\\n  event KeeperBonding(address indexed _keeper, uint256 _block, uint256 _active, uint256 _bond);\\n  event KeeperBonded(address indexed _keeper, uint256 _block, uint256 _activated, uint256 _bond);\\n  event KeeperUnbonding(address indexed _keeper, uint256 _block, uint256 _deactive, uint256 _bond);\\n  event KeeperUnbound(address indexed _keeper, uint256 _block, uint256 _deactivated, uint256 _bond);\\n  event KeeperSlashed(address indexed _keeper, address indexed _slasher, uint256 _block, uint256 _slash);\\n  event KeeperDispute(address indexed _keeper, uint256 _block);\\n  event KeeperResolved(address indexed _keeper, uint256 _block);\\n  event AddCredit(address indexed _credit, address indexed _job, address indexed _creditor, uint256 _block, uint256 _amount);\\n\\n  // variables\\n  function keep3rHelper() external returns (address);\\n\\n  function delegates(address _delegator) external view returns (address);\\n\\n  function checkpoints(address _account, uint32 _checkpoint) external view returns (Checkpoint memory);\\n\\n  function numCheckpoints(address _account) external view returns (uint32);\\n\\n  function DOMAIN_TYPEHASH() external returns (bytes32);\\n\\n  function DOMAINSEPARATOR() external returns (bytes32);\\n\\n  function DELEGATION_TYPEHASH() external returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external returns (bytes32);\\n\\n  function nonces(address _user) external view returns (uint256);\\n\\n  function BOND() external returns (uint256);\\n\\n  function UNBOND() external returns (uint256);\\n\\n  function LIQUIDITYBOND() external returns (uint256);\\n\\n  function FEE() external returns (uint256);\\n\\n  function BASE() external returns (uint256);\\n\\n  function ETH() external returns (address);\\n\\n  function bondings(address _user, address _bonding) external view returns (uint256);\\n\\n  function canWithdrawAfter(address _user, address _bonding) external view returns (uint256);\\n\\n  function pendingUnbondAmount(address _keeper, address _bonding) external view returns (uint256);\\n\\n  function pendingbonds(address _keeper, address _bonding) external view returns (uint256);\\n\\n  function bonds(address _keeper, address _bonding) external view returns (uint256);\\n\\n  function votes(address _delegator) external view returns (uint256);\\n\\n  function totalBonded() external returns (uint256);\\n\\n  function firstSeen(address _keeper) external view returns (uint256);\\n\\n  function disputes(address _keeper) external view returns (bool);\\n\\n  function lastJob(address _keeper) external view returns (uint256);\\n\\n  function workCompleted(address _keeper) external view returns (uint256);\\n\\n  function jobs(address _job) external view returns (bool);\\n\\n  function credits(address _job, address _credit) external view returns (uint256);\\n\\n  function liquidityProvided(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external view returns (uint256);\\n\\n  function liquidityUnbonding(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external view returns (uint256);\\n\\n  function liquidityAmountsUnbonding(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external view returns (uint256);\\n\\n  function jobProposalDelay(address _job) external view returns (uint256);\\n\\n  function liquidityApplied(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external view returns (uint256);\\n\\n  function liquidityAmount(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external view returns (uint256);\\n\\n  function keepers(address _keeper) external view returns (bool);\\n\\n  function blacklist(address _keeper) external view returns (bool);\\n\\n  function keeperList(uint256 _index) external view returns (address);\\n\\n  function jobList(uint256 _index) external view returns (address);\\n\\n  function governance() external returns (address);\\n\\n  function pendingGovernance() external returns (address);\\n\\n  function liquidityAccepted(address _liquidity) external view returns (bool);\\n\\n  function liquidityPairs(uint256 _index) external view returns (address);\\n\\n  // methods\\n  function getCurrentVotes(address _account) external view returns (uint256);\\n\\n  function addCreditETH(address _job) external payable;\\n\\n  function addCredit(\\n    address _credit,\\n    address _job,\\n    uint256 _amount\\n  ) external;\\n\\n  function addVotes(address _voter, uint256 _amount) external;\\n\\n  function removeVotes(address _voter, uint256 _amount) external;\\n\\n  function addKPRCredit(address _job, uint256 _amount) external;\\n\\n  function approveLiquidity(address _liquidity) external;\\n\\n  function revokeLiquidity(address _liquidity) external;\\n\\n  function pairs() external view returns (address[] memory);\\n\\n  function addLiquidityToJob(\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) external;\\n\\n  function applyCreditToJob(\\n    address _provider,\\n    address _liquidity,\\n    address _job\\n  ) external;\\n\\n  function unbondLiquidityFromJob(\\n    address _liquidity,\\n    address _job,\\n    uint256 _amount\\n  ) external;\\n\\n  function removeLiquidityFromJob(address _liquidity, address _job) external;\\n\\n  function mint(uint256 _amount) external;\\n\\n  function burn(uint256 _amount) external;\\n\\n  function worked(address _keeper) external;\\n\\n  function receipt(\\n    address _credit,\\n    address _keeper,\\n    uint256 _amount\\n  ) external;\\n\\n  function receiptETH(address _keeper, uint256 _amount) external;\\n\\n  function addJob(address _job) external;\\n\\n  function getJobs() external view returns (address[] memory);\\n\\n  function removeJob(address _job) external;\\n\\n  function setKeep3rHelper(address _keep3rHelper) external;\\n\\n  function setGovernance(address _governance) external;\\n\\n  function acceptGovernance() external;\\n\\n  function isKeeper(address _keeper) external returns (bool);\\n\\n  function isMinKeeper(\\n    address _keeper,\\n    uint256 _minBond,\\n    uint256 _earned,\\n    uint256 _age\\n  ) external returns (bool);\\n\\n  function isBondedKeeper(\\n    address _keeper,\\n    address _bond,\\n    uint256 _minBond,\\n    uint256 _earned,\\n    uint256 _age\\n  ) external returns (bool);\\n\\n  function bond(address _bonding, uint256 _amount) external;\\n\\n  function getKeepers() external view returns (address[] memory);\\n\\n  function activate(address _bonding) external;\\n\\n  function unbond(address _bonding, uint256 _amount) external;\\n\\n  function slash(\\n    address _bonded,\\n    address _keeper,\\n    uint256 _amount\\n  ) external;\\n\\n  function withdraw(address _bonding) external;\\n\\n  function dispute(address _keeper) external;\\n\\n  function revoke(address _keeper) external;\\n\\n  function resolve(address _keeper) external;\\n\\n  function permit(\\n    address _owner,\\n    address _spender,\\n    uint256 _amount,\\n    uint256 _deadline,\\n    uint8 _v,\\n    bytes32 _r,\\n    bytes32 _s\\n  ) external;\\n}\\n\",\"keccak256\":\"0x0ef0f0dbe798e8b6c2cfb95d721209ce7657237628b97e72a919be4b51a44aa5\",\"license\":\"MIT\"},\"contracts/interfaces/IKeep3rV1Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './peripherals/IKeep3rGovernance.sol';\\n\\ninterface IKeep3rV1Proxy is IKeep3rGovernance {\\n  // structs\\n  struct Recipient {\\n    address recipient;\\n    uint256 caps;\\n  }\\n\\n  // variables\\n  function keep3rV1() external view returns (address);\\n\\n  function minter() external view returns (address);\\n\\n  function next(address) external view returns (uint256);\\n\\n  function caps(address) external view returns (uint256);\\n\\n  function recipients() external view returns (address[] memory);\\n\\n  function recipientsCaps() external view returns (Recipient[] memory);\\n\\n  // errors\\n  error Cooldown();\\n  error NoDrawableAmount();\\n  error OnlyMinter();\\n\\n  // methods\\n  function addRecipient(address recipient, uint256 amount) external;\\n\\n  function removeRecipient(address recipient) external;\\n\\n  function draw() external returns (uint256 _amount);\\n\\n  function setKeep3rV1(address _keep3rV1) external;\\n\\n  function setMinter(address _minter) external;\\n\\n  function mint(uint256 _amount) external;\\n\\n  function mint(address _account, uint256 _amount) external;\\n\\n  function setKeep3rV1Governance(address _governance) external;\\n\\n  function acceptKeep3rV1Governance() external;\\n\\n  function dispute(address _keeper) external;\\n\\n  function slash(\\n    address _bonded,\\n    address _keeper,\\n    uint256 _amount\\n  ) external;\\n\\n  function revoke(address _keeper) external;\\n\\n  function resolve(address _keeper) external;\\n\\n  function addJob(address _job) external;\\n\\n  function removeJob(address _job) external;\\n\\n  function addKPRCredit(address _job, uint256 _amount) external;\\n\\n  function approveLiquidity(address _liquidity) external;\\n\\n  function revokeLiquidity(address _liquidity) external;\\n\\n  function setKeep3rHelper(address _keep3rHelper) external;\\n\\n  function addVotes(address _voter, uint256 _amount) external;\\n\\n  function removeVotes(address _voter, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xa8bdcebdca22eb48b060dc109b82a8156ece0a671705833093ce1206a41394bf\",\"license\":\"MIT\"},\"contracts/interfaces/peripherals/IBaseErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IBaseErrors {\\n  /// @notice Throws if a variable is assigned to the zero address\\n  error ZeroAddress();\\n}\\n\",\"keccak256\":\"0x9130019a08d9eaedfb920a323fed5c7f409736cd918f1a32921c93551b3ee00e\",\"license\":\"MIT\"},\"contracts/interfaces/peripherals/IDustCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport './IBaseErrors.sol';\\n\\ninterface IDustCollector is IBaseErrors {\\n  /// @notice Emitted when dust is sent\\n  /// @param _token The token that will be transferred\\n  /// @param _amount The amount of the token that will be transferred\\n  /// @param _to The address which will receive the funds\\n  event DustSent(address _token, uint256 _amount, address _to);\\n\\n  /// @notice Allows an authorized user to transfer the tokens or eth that may have been left in a contract\\n  /// @param _token The token that will be transferred\\n  /// @param _amount The amount of the token that will be transferred\\n  /// @param _to The address that will receive the idle funds\\n  function sendDust(\\n    address _token,\\n    uint256 _amount,\\n    address _to\\n  ) external;\\n}\\n\",\"keccak256\":\"0x38dce228111f2a3c6b26ac09c5652c3f1f184c4cfe50d11ff0958ef6a50683bb\",\"license\":\"MIT\"},\"contracts/interfaces/peripherals/IKeep3rGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\ninterface IKeep3rGovernance {\\n  // events\\n  event GovernanceSet(address _governance);\\n  event GovernanceProposal(address _pendingGovernance);\\n\\n  // variables\\n  function governance() external view returns (address);\\n\\n  function pendingGovernance() external view returns (address);\\n\\n  // errors\\n  error OnlyGovernance();\\n  error OnlyPendingGovernance();\\n\\n  // methods\\n  function setGovernance(address _governance) external;\\n\\n  function acceptGovernance() external;\\n}\\n\",\"keccak256\":\"0xc6c7fd1e1734be562f64a59a584a247d1641ee596ba486d469b14dc8e3394449\",\"license\":\"MIT\"},\"contracts/peripherals/DustCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport '../interfaces/peripherals/IDustCollector.sol';\\nimport './Keep3rGovernance.sol';\\n\\nabstract contract DustCollector is IDustCollector, Keep3rGovernance {\\n  using SafeERC20 for IERC20;\\n\\n  address internal constant _ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n  function sendDust(\\n    address _token,\\n    uint256 _amount,\\n    address _to\\n  ) external override onlyGovernance {\\n    if (_to == address(0)) revert ZeroAddress();\\n    if (_token == _ETH_ADDRESS) {\\n      payable(_to).transfer(_amount);\\n    } else {\\n      IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n    emit DustSent(_token, _amount, _to);\\n  }\\n}\\n\",\"keccak256\":\"0x329f0fc3730fc5bea4aabb8aecec86712e2bc9fbc42e15194c0633bb1ca07e26\",\"license\":\"MIT\"},\"contracts/peripherals/Keep3rGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4 <0.9.0;\\n\\nimport '../interfaces/peripherals/IKeep3rGovernance.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nabstract contract Keep3rGovernance is IKeep3rGovernance {\\n  address public override governance;\\n  address public override pendingGovernance;\\n\\n  constructor(address _governance) {\\n    governance = _governance;\\n  }\\n\\n  function setGovernance(address _governance) external override onlyGovernance {\\n    pendingGovernance = _governance;\\n    emit GovernanceProposal(_governance);\\n  }\\n\\n  function acceptGovernance() external override onlyPendingGovernance {\\n    governance = pendingGovernance;\\n    delete pendingGovernance;\\n    emit GovernanceSet(governance);\\n  }\\n\\n  modifier onlyGovernance {\\n    if (msg.sender != governance) revert OnlyGovernance();\\n    _;\\n  }\\n\\n  modifier onlyPendingGovernance {\\n    if (msg.sender != pendingGovernance) revert OnlyPendingGovernance();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa0e56c41d036374bcf08fc166937b1082fc3be92776957bfead93ebf3078bc19\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001a3238038062001a32833981016040819052620000349162000083565b600080546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055620000bb565b80516001600160a01b03811681146200007e57600080fd5b919050565b600080604083850312156200009757600080fd5b620000a28362000066565b9150620000b26020840162000066565b90509250929050565b61196780620000cb6000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c8063966abd001161010f578063d8ae6faf116100a2578063f39c38a011610071578063f39c38a014610433578063f75f9f7b14610446578063f798224314610459578063fca3b5aa1461046c57600080fd5b8063d8ae6faf146103e7578063de63298d146103fa578063e74f82391461040d578063ec00cdfc1461042057600080fd5b8063b600702a116100de578063b600702a14610399578063ba9b4d65146103ac578063c5198abc146103c1578063ce6a0880146103d457600080fd5b8063966abd0014610340578063a0712d6814610353578063ab033ea914610366578063ab73e3161461037957600080fd5b806340c10f191161018757806366d97b211161015657806366d97b21146102e757806372da828a1461030757806374a8f1031461031a578063807119891461032d57600080fd5b806340c10f191461029b57806355ea6c47146102ae5780635aa6e675146102c157806364bb43ee146102d457600080fd5b806312a29198116101c357806312a29198146102655780631ef94b9114610278578063238efcbc1461028b5780633619cb721461029357600080fd5b806307546172146101f55780630770f809146102255780630e57d4ce1461023a5780630eecae211461024f575b600080fd5b600354610208906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610238610233366004611677565b61047f565b005b61024261050d565b60405161021c919061178b565b61025761051e565b60405190815260200161021c565b610238610273366004611677565b610609565b600254610208906001600160a01b031681565b61023861065a565b6102386106e3565b6102386102a93660046116ce565b610778565b6102386102bc366004611677565b6107b1565b600054610208906001600160a01b031681565b6102386102e2366004611677565b61080e565b6102576102f5366004611677565b60046020526000908152604090205481565b610238610315366004611677565b61086b565b610238610328366004611677565b6108c8565b61023861033b366004611677565b610925565b61023861034e3660046116f8565b610982565b610238610361366004611756565b610a98565b610238610374366004611677565b610ad0565b610257610387366004611677565b60056020526000908152604090205481565b6102386103a7366004611677565b610b4f565b6103b4610bac565b60405161021c91906117d8565b6102386103cf366004611677565b610cb7565b6102386103e23660046116ce565b610d14565b6102386103f53660046116ce565b610daa565b6102386104083660046116ce565b610e0e565b61023861041b366004611692565b610e72565b61023861042e366004611677565b610f10565b600154610208906001600160a01b031681565b610238610454366004611677565b610f86565b6102386104673660046116ce565b610fe3565b61023861047a366004611677565b611036565b6000546001600160a01b031633146104aa576040516354348f0360e01b815260040160405180910390fd5b60025460405163ab033ea960e01b81526001600160a01b0383811660048301529091169063ab033ea9906024015b600060405180830381600087803b1580156104f257600080fd5b505af1158015610506573d6000803e3d6000fd5b5050505050565b606061051960066110ac565b905090565b3360009081526005602052604081205442101561054e5760405163b0782df760e01b815260040160405180910390fd5b3360009081526004602052604090205461057b57604051633faaf86560e21b815260040160405180910390fd5b3360009081526005602052604090205462093a809061059a904261187b565b11156105c2576105ad4262093a80611863565b336000908152600560205260409020556105ea565b336000908152600560205260408120805462093a8092906105e4908490611863565b90915550505b50336000818152600460205260409020549061060690826110c0565b90565b6000546001600160a01b03163314610634576040516354348f0360e01b815260040160405180910390fd5b61063f6006826111a9565b506001600160a01b0316600090815260046020526040812055565b6001546001600160a01b0316331461068557604051637ef5703160e11b815260040160405180910390fd5b60018054600080546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527fc73be659241aade67e9a059bcf21494955018b213dbd1179054ccf928b13f3b69060200160405180910390a1565b6000546001600160a01b0316331461070e576040516354348f0360e01b815260040160405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663238efcbc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561075e57600080fd5b505af1158015610772573d6000803e3d6000fd5b50505050565b6000546001600160a01b031633146107a3576040516354348f0360e01b815260040160405180910390fd5b6107ad82826110c0565b5050565b6000546001600160a01b031633146107dc576040516354348f0360e01b815260040160405180910390fd5b6002546040516355ea6c4760e01b81526001600160a01b038381166004830152909116906355ea6c47906024016104d8565b6000546001600160a01b03163314610839576040516354348f0360e01b815260040160405180910390fd5b60025460405163325da1f760e11b81526001600160a01b038381166004830152909116906364bb43ee906024016104d8565b6000546001600160a01b03163314610896576040516354348f0360e01b815260040160405180910390fd5b60025460405163396d414560e11b81526001600160a01b038381166004830152909116906372da828a906024016104d8565b6000546001600160a01b031633146108f3576040516354348f0360e01b815260040160405180910390fd5b6002546040516374a8f10360e01b81526001600160a01b038381166004830152909116906374a8f103906024016104d8565b6000546001600160a01b03163314610950576040516354348f0360e01b815260040160405180910390fd5b600254604051638071198960e01b81526001600160a01b038381166004830152909116906380711989906024016104d8565b6000546001600160a01b031633146109ad576040516354348f0360e01b815260040160405180910390fd5b6001600160a01b0381166109d45760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610a35576040516001600160a01b0382169083156108fc029084906000818181858888f19350505050158015610a2f573d6000803e3d6000fd5b50610a49565b610a496001600160a01b03841682846111c7565b604080516001600160a01b0385811682526020820185905283168183015290517f9a3055ded8c8b5f21bbf4946c5afab6e1fa8b3f057922658e5e1ade125fb0b1e9181900360600190a1505050565b6003546001600160a01b03163314610ac357604051639cdc2ed560e01b815260040160405180910390fd5b610acd33826110c0565b50565b6000546001600160a01b03163314610afb576040516354348f0360e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fe987aaedf9d279143bdf1eee16cf1d0feb47742867d81083df8d6cd0a5ac857f9060200160405180910390a150565b6000546001600160a01b03163314610b7a576040516354348f0360e01b815260040160405180910390fd5b600254604051635b00381560e11b81526001600160a01b0383811660048301529091169063b600702a906024016104d8565b6060610bb86006611219565b67ffffffffffffffff811115610bd057610bd061191b565b604051908082528060200260200182016040528015610c1557816020015b6040805180820190915260008082526020820152815260200190600190039081610bee5790505b50905060005b610c256006611219565b811015610cb3576040805180820190915280610c42600684611223565b6001600160a01b0316815260200160046000610c5f600686611223565b6001600160a01b03166001600160a01b0316815260200190815260200160002054815250828281518110610c9557610c95611905565b60200260200101819052508080610cab906118be565b915050610c1b565b5090565b6000546001600160a01b03163314610ce2576040516354348f0360e01b815260040160405180910390fd5b60025460405163314662af60e21b81526001600160a01b0383811660048301529091169063c5198abc906024016104d8565b6000546001600160a01b03163314610d3f576040516354348f0360e01b815260040160405180910390fd5b60025460405163019cd41160e71b81526001600160a01b038481166004830152602482018490529091169063ce6a0880906044015b600060405180830381600087803b158015610d8e57600080fd5b505af1158015610da2573d6000803e3d6000fd5b505050505050565b6000546001600160a01b03163314610dd5576040516354348f0360e01b815260040160405180910390fd5b60025460405163d8ae6faf60e01b81526001600160a01b038481166004830152602482018490529091169063d8ae6faf90604401610d74565b6000546001600160a01b03163314610e39576040516354348f0360e01b815260040160405180910390fd5b60025460405163de63298d60e01b81526001600160a01b038481166004830152602482018490529091169063de63298d90604401610d74565b6000546001600160a01b03163314610e9d576040516354348f0360e01b815260040160405180910390fd5b60025460405163e74f823960e01b81526001600160a01b0385811660048301528481166024830152604482018490529091169063e74f823990606401600060405180830381600087803b158015610ef357600080fd5b505af1158015610f07573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b03163314610f3b576040516354348f0360e01b815260040160405180910390fd5b806001600160a01b038116610f635760405163d92e233d60e01b815260040160405180910390fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610fb1576040516354348f0360e01b815260040160405180910390fd5b60025460405163f75f9f7b60e01b81526001600160a01b0383811660048301529091169063f75f9f7b906024016104d8565b6000546001600160a01b0316331461100e576040516354348f0360e01b815260040160405180910390fd5b61101960068361122f565b506001600160a01b03909116600090815260046020526040902055565b6000546001600160a01b03163314611061576040516354348f0360e01b815260040160405180910390fd5b806001600160a01b0381166110895760405163d92e233d60e01b815260040160405180910390fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b606060006110b983611244565b9392505050565b60025460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401600060405180830381600087803b15801561110657600080fd5b505af115801561111a573d6000803e3d6000fd5b505060025460405163a9059cbb60e01b81526001600160a01b03868116600483015260248201869052909116925063a9059cbb9150604401602060405180830381600087803b15801561116c57600080fd5b505af1158015611180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a49190611734565b505050565b60006111be836001600160a01b0384166112a0565b90505b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526111a4908490611393565b60006111c1825490565b60006111be838361146a565b60006111be836001600160a01b038416611494565b60608160000180548060200260200160405190810160405280929190818152602001828054801561129457602002820191906000526020600020905b815481526020019060010190808311611280575b50505050509050919050565b600081815260018301602052604081205480156113895760006112c460018361187b565b85549091506000906112d89060019061187b565b905081811461133d5760008660000182815481106112f8576112f8611905565b906000526020600020015490508087600001848154811061131b5761131b611905565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061134e5761134e6118ef565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506111c1565b60009150506111c1565b60006113e8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114e39092919063ffffffff16565b8051909150156111a457808060200190518101906114069190611734565b6111a45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b600082600001828154811061148157611481611905565b9060005260206000200154905092915050565b60008181526001830160205260408120546114db575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556111c1565b5060006111c1565b60606114f284846000856114fa565b949350505050565b60608247101561155b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401611461565b843b6115a95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611461565b600080866001600160a01b031685876040516115c5919061176f565b60006040518083038185875af1925050503d8060008114611602576040519150601f19603f3d011682016040523d82523d6000602084013e611607565b606091505b5091509150611617828286611622565b979650505050505050565b606083156116315750816110b9565b8251156116415782518084602001fd5b8160405162461bcd60e51b81526004016114619190611830565b80356001600160a01b038116811461167257600080fd5b919050565b60006020828403121561168957600080fd5b6111be8261165b565b6000806000606084860312156116a757600080fd5b6116b08461165b565b92506116be6020850161165b565b9150604084013590509250925092565b600080604083850312156116e157600080fd5b6116ea8361165b565b946020939093013593505050565b60008060006060848603121561170d57600080fd5b6117168461165b565b92506020840135915061172b6040850161165b565b90509250925092565b60006020828403121561174657600080fd5b815180151581146110b957600080fd5b60006020828403121561176857600080fd5b5035919050565b60008251611781818460208701611892565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156117cc5783516001600160a01b0316835292840192918401916001016117a7565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b8281101561182357815180516001600160a01b031685528601518685015292840192908501906001016117f5565b5091979650505050505050565b602081526000825180602084015261184f816040850160208701611892565b601f01601f19169190910160400192915050565b60008219821115611876576118766118d9565b500190565b60008282101561188d5761188d6118d9565b500390565b60005b838110156118ad578181015183820152602001611895565b838111156107725750506000910152565b60006000198214156118d2576118d26118d9565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212205230404e3f738a545dd096577face1a7d0684a3a073d39a9363caf6b5182007864736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c8063966abd001161010f578063d8ae6faf116100a2578063f39c38a011610071578063f39c38a014610433578063f75f9f7b14610446578063f798224314610459578063fca3b5aa1461046c57600080fd5b8063d8ae6faf146103e7578063de63298d146103fa578063e74f82391461040d578063ec00cdfc1461042057600080fd5b8063b600702a116100de578063b600702a14610399578063ba9b4d65146103ac578063c5198abc146103c1578063ce6a0880146103d457600080fd5b8063966abd0014610340578063a0712d6814610353578063ab033ea914610366578063ab73e3161461037957600080fd5b806340c10f191161018757806366d97b211161015657806366d97b21146102e757806372da828a1461030757806374a8f1031461031a578063807119891461032d57600080fd5b806340c10f191461029b57806355ea6c47146102ae5780635aa6e675146102c157806364bb43ee146102d457600080fd5b806312a29198116101c357806312a29198146102655780631ef94b9114610278578063238efcbc1461028b5780633619cb721461029357600080fd5b806307546172146101f55780630770f809146102255780630e57d4ce1461023a5780630eecae211461024f575b600080fd5b600354610208906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610238610233366004611677565b61047f565b005b61024261050d565b60405161021c919061178b565b61025761051e565b60405190815260200161021c565b610238610273366004611677565b610609565b600254610208906001600160a01b031681565b61023861065a565b6102386106e3565b6102386102a93660046116ce565b610778565b6102386102bc366004611677565b6107b1565b600054610208906001600160a01b031681565b6102386102e2366004611677565b61080e565b6102576102f5366004611677565b60046020526000908152604090205481565b610238610315366004611677565b61086b565b610238610328366004611677565b6108c8565b61023861033b366004611677565b610925565b61023861034e3660046116f8565b610982565b610238610361366004611756565b610a98565b610238610374366004611677565b610ad0565b610257610387366004611677565b60056020526000908152604090205481565b6102386103a7366004611677565b610b4f565b6103b4610bac565b60405161021c91906117d8565b6102386103cf366004611677565b610cb7565b6102386103e23660046116ce565b610d14565b6102386103f53660046116ce565b610daa565b6102386104083660046116ce565b610e0e565b61023861041b366004611692565b610e72565b61023861042e366004611677565b610f10565b600154610208906001600160a01b031681565b610238610454366004611677565b610f86565b6102386104673660046116ce565b610fe3565b61023861047a366004611677565b611036565b6000546001600160a01b031633146104aa576040516354348f0360e01b815260040160405180910390fd5b60025460405163ab033ea960e01b81526001600160a01b0383811660048301529091169063ab033ea9906024015b600060405180830381600087803b1580156104f257600080fd5b505af1158015610506573d6000803e3d6000fd5b5050505050565b606061051960066110ac565b905090565b3360009081526005602052604081205442101561054e5760405163b0782df760e01b815260040160405180910390fd5b3360009081526004602052604090205461057b57604051633faaf86560e21b815260040160405180910390fd5b3360009081526005602052604090205462093a809061059a904261187b565b11156105c2576105ad4262093a80611863565b336000908152600560205260409020556105ea565b336000908152600560205260408120805462093a8092906105e4908490611863565b90915550505b50336000818152600460205260409020549061060690826110c0565b90565b6000546001600160a01b03163314610634576040516354348f0360e01b815260040160405180910390fd5b61063f6006826111a9565b506001600160a01b0316600090815260046020526040812055565b6001546001600160a01b0316331461068557604051637ef5703160e11b815260040160405180910390fd5b60018054600080546001600160a01b0383166001600160a01b031991821681179092559091169091556040519081527fc73be659241aade67e9a059bcf21494955018b213dbd1179054ccf928b13f3b69060200160405180910390a1565b6000546001600160a01b0316331461070e576040516354348f0360e01b815260040160405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663238efcbc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561075e57600080fd5b505af1158015610772573d6000803e3d6000fd5b50505050565b6000546001600160a01b031633146107a3576040516354348f0360e01b815260040160405180910390fd5b6107ad82826110c0565b5050565b6000546001600160a01b031633146107dc576040516354348f0360e01b815260040160405180910390fd5b6002546040516355ea6c4760e01b81526001600160a01b038381166004830152909116906355ea6c47906024016104d8565b6000546001600160a01b03163314610839576040516354348f0360e01b815260040160405180910390fd5b60025460405163325da1f760e11b81526001600160a01b038381166004830152909116906364bb43ee906024016104d8565b6000546001600160a01b03163314610896576040516354348f0360e01b815260040160405180910390fd5b60025460405163396d414560e11b81526001600160a01b038381166004830152909116906372da828a906024016104d8565b6000546001600160a01b031633146108f3576040516354348f0360e01b815260040160405180910390fd5b6002546040516374a8f10360e01b81526001600160a01b038381166004830152909116906374a8f103906024016104d8565b6000546001600160a01b03163314610950576040516354348f0360e01b815260040160405180910390fd5b600254604051638071198960e01b81526001600160a01b038381166004830152909116906380711989906024016104d8565b6000546001600160a01b031633146109ad576040516354348f0360e01b815260040160405180910390fd5b6001600160a01b0381166109d45760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1415610a35576040516001600160a01b0382169083156108fc029084906000818181858888f19350505050158015610a2f573d6000803e3d6000fd5b50610a49565b610a496001600160a01b03841682846111c7565b604080516001600160a01b0385811682526020820185905283168183015290517f9a3055ded8c8b5f21bbf4946c5afab6e1fa8b3f057922658e5e1ade125fb0b1e9181900360600190a1505050565b6003546001600160a01b03163314610ac357604051639cdc2ed560e01b815260040160405180910390fd5b610acd33826110c0565b50565b6000546001600160a01b03163314610afb576040516354348f0360e01b815260040160405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527fe987aaedf9d279143bdf1eee16cf1d0feb47742867d81083df8d6cd0a5ac857f9060200160405180910390a150565b6000546001600160a01b03163314610b7a576040516354348f0360e01b815260040160405180910390fd5b600254604051635b00381560e11b81526001600160a01b0383811660048301529091169063b600702a906024016104d8565b6060610bb86006611219565b67ffffffffffffffff811115610bd057610bd061191b565b604051908082528060200260200182016040528015610c1557816020015b6040805180820190915260008082526020820152815260200190600190039081610bee5790505b50905060005b610c256006611219565b811015610cb3576040805180820190915280610c42600684611223565b6001600160a01b0316815260200160046000610c5f600686611223565b6001600160a01b03166001600160a01b0316815260200190815260200160002054815250828281518110610c9557610c95611905565b60200260200101819052508080610cab906118be565b915050610c1b565b5090565b6000546001600160a01b03163314610ce2576040516354348f0360e01b815260040160405180910390fd5b60025460405163314662af60e21b81526001600160a01b0383811660048301529091169063c5198abc906024016104d8565b6000546001600160a01b03163314610d3f576040516354348f0360e01b815260040160405180910390fd5b60025460405163019cd41160e71b81526001600160a01b038481166004830152602482018490529091169063ce6a0880906044015b600060405180830381600087803b158015610d8e57600080fd5b505af1158015610da2573d6000803e3d6000fd5b505050505050565b6000546001600160a01b03163314610dd5576040516354348f0360e01b815260040160405180910390fd5b60025460405163d8ae6faf60e01b81526001600160a01b038481166004830152602482018490529091169063d8ae6faf90604401610d74565b6000546001600160a01b03163314610e39576040516354348f0360e01b815260040160405180910390fd5b60025460405163de63298d60e01b81526001600160a01b038481166004830152602482018490529091169063de63298d90604401610d74565b6000546001600160a01b03163314610e9d576040516354348f0360e01b815260040160405180910390fd5b60025460405163e74f823960e01b81526001600160a01b0385811660048301528481166024830152604482018490529091169063e74f823990606401600060405180830381600087803b158015610ef357600080fd5b505af1158015610f07573d6000803e3d6000fd5b50505050505050565b6000546001600160a01b03163314610f3b576040516354348f0360e01b815260040160405180910390fd5b806001600160a01b038116610f635760405163d92e233d60e01b815260040160405180910390fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610fb1576040516354348f0360e01b815260040160405180910390fd5b60025460405163f75f9f7b60e01b81526001600160a01b0383811660048301529091169063f75f9f7b906024016104d8565b6000546001600160a01b0316331461100e576040516354348f0360e01b815260040160405180910390fd5b61101960068361122f565b506001600160a01b03909116600090815260046020526040902055565b6000546001600160a01b03163314611061576040516354348f0360e01b815260040160405180910390fd5b806001600160a01b0381166110895760405163d92e233d60e01b815260040160405180910390fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b606060006110b983611244565b9392505050565b60025460405163140e25ad60e31b8152600481018390526001600160a01b039091169063a0712d6890602401600060405180830381600087803b15801561110657600080fd5b505af115801561111a573d6000803e3d6000fd5b505060025460405163a9059cbb60e01b81526001600160a01b03868116600483015260248201869052909116925063a9059cbb9150604401602060405180830381600087803b15801561116c57600080fd5b505af1158015611180573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a49190611734565b505050565b60006111be836001600160a01b0384166112a0565b90505b92915050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526111a4908490611393565b60006111c1825490565b60006111be838361146a565b60006111be836001600160a01b038416611494565b60608160000180548060200260200160405190810160405280929190818152602001828054801561129457602002820191906000526020600020905b815481526020019060010190808311611280575b50505050509050919050565b600081815260018301602052604081205480156113895760006112c460018361187b565b85549091506000906112d89060019061187b565b905081811461133d5760008660000182815481106112f8576112f8611905565b906000526020600020015490508087600001848154811061131b5761131b611905565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061134e5761134e6118ef565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506111c1565b60009150506111c1565b60006113e8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166114e39092919063ffffffff16565b8051909150156111a457808060200190518101906114069190611734565b6111a45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b600082600001828154811061148157611481611905565b9060005260206000200154905092915050565b60008181526001830160205260408120546114db575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556111c1565b5060006111c1565b60606114f284846000856114fa565b949350505050565b60608247101561155b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401611461565b843b6115a95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611461565b600080866001600160a01b031685876040516115c5919061176f565b60006040518083038185875af1925050503d8060008114611602576040519150601f19603f3d011682016040523d82523d6000602084013e611607565b606091505b5091509150611617828286611622565b979650505050505050565b606083156116315750816110b9565b8251156116415782518084602001fd5b8160405162461bcd60e51b81526004016114619190611830565b80356001600160a01b038116811461167257600080fd5b919050565b60006020828403121561168957600080fd5b6111be8261165b565b6000806000606084860312156116a757600080fd5b6116b08461165b565b92506116be6020850161165b565b9150604084013590509250925092565b600080604083850312156116e157600080fd5b6116ea8361165b565b946020939093013593505050565b60008060006060848603121561170d57600080fd5b6117168461165b565b92506020840135915061172b6040850161165b565b90509250925092565b60006020828403121561174657600080fd5b815180151581146110b957600080fd5b60006020828403121561176857600080fd5b5035919050565b60008251611781818460208701611892565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b818110156117cc5783516001600160a01b0316835292840192918401916001016117a7565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b8281101561182357815180516001600160a01b031685528601518685015292840192908501906001016117f5565b5091979650505050505050565b602081526000825180602084015261184f816040850160208701611892565b601f01601f19169190910160400192915050565b60008219821115611876576118766118d9565b500190565b60008282101561188d5761188d6118d9565b500390565b60005b838110156118ad578181015183820152602001611895565b838111156107725750506000910152565b60006000198214156118d2576118d26118d9565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212205230404e3f738a545dd096577face1a7d0684a3a073d39a9363caf6b5182007864736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "sendDust(address,uint256,address)": {
        "params": {
          "_amount": "The amount of the token that will be transferred",
          "_to": "The address that will receive the idle funds",
          "_token": "The token that will be transferred"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ZeroAddress()": [
        {
          "notice": "Throws if a variable is assigned to the zero address"
        }
      ]
    },
    "events": {
      "DustSent(address,uint256,address)": {
        "notice": "Emitted when dust is sent"
      }
    },
    "kind": "user",
    "methods": {
      "sendDust(address,uint256,address)": {
        "notice": "Allows an authorized user to transfer the tokens or eth that may have been left in a contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2884,
        "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
        "label": "governance",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2887,
        "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
        "label": "pendingGovernance",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1242,
        "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
        "label": "keep3rV1",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1245,
        "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
        "label": "minter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1265,
        "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
        "label": "caps",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1270,
        "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
        "label": "next",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1273,
        "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
        "label": "_recipients",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(AddressSet)935_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)935_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 934,
            "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)634_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)634_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 629,
            "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 633,
            "contract": "contracts/Keep3rV1Proxy.sol:Keep3rV1Proxy",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}